/*!
 * GentleForm - v0.0.0
 * Validate a form at the right time, using browser's native api.
 * https://github.com/Zhouzi/GentleForm
 *
 * @author Gabin Aureche
 * @license MIT
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["GentleForm"] = factory();
	else
		root["GentleForm"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _$ = __webpack_require__(1);

	var _$2 = _interopRequireDefault(_$);

	var _isFormInput = __webpack_require__(2);

	var _isFormInput2 = _interopRequireDefault(_isFormInput);

	var GentleForm = (function () {
	    function GentleForm(selector, onSubmit) {
	        _classCallCheck(this, GentleForm);

	        var self = this;
	        self.$form = (0, _$2['default'])(selector);
	        self.onSubmit = typeof onSubmit == 'function' ? onSubmit : function () {};

	        self.$form.on('blur', function (event) {
	            var $target = (0, _$2['default'])(event.target);

	            if (!(0, _isFormInput2['default'])($target)) return;

	            var isDirty = $target.getState('dirty');

	            $target.concat(self.$form).setState('touched', true);

	            if (isDirty) $target.setState('interacted', true);

	            self.validate($target);
	        }).on('input', function (event) {
	            var $target = (0, _$2['default'])(event.target);
	            $target.concat(self.$form).setState('dirty', true);

	            self.validate($target);
	        }).on('submit', function (event) {
	            event.preventDefault();

	            self.$form.setState('submitted', true);

	            var data = {};
	            for (var i = 0, form = self.$form.get(0), len = form.length, $e = undefined, _name = undefined; i < len; i++) {
	                $e = (0, _$2['default'])(form[i]);

	                if (!(0, _isFormInput2['default'])($e)) continue;

	                $e.setState('submitted', true);
	                self.validate($e);

	                _name = $e.getAttr('name');
	                data[_name] = { errors: $e.getErrors(), value: $e.getValue() };
	            }

	            self.validate(self.$form, true);
	            self.onSubmit(event, self.$form.isValid(), data);
	        });

	        (0, _$2['default'])('[data-gentle-error-when]', self.$form).hide();
	    }

	    _createClass(GentleForm, [{
	        key: 'validate',
	        value: function validate($elements) {
	            var _this = this;

	            var validateForm = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	            $elements.each(function (element) {
	                var $element = (0, _$2['default'])(element);
	                var tag = $element.get(0).tagName.toLowerCase();

	                if (tag == 'form' && !$element.getState('submitted')) return;
	                if (!$element.getState('interacted') && !$element.getState('submitted')) return;

	                if ($element.isValid()) $element.setState('invalid', false);else if (tag != 'form' || validateForm) $element.setState('invalid', true);

	                var errors = $element.getErrors();
	                var $errorMessages = (0, _$2['default'])('[data-gentle-errors-for="' + $element.getAttr('name') + '"]', _this.$form);
	                var $children = undefined;

	                $errorMessages.each(function (element) {
	                    for (var errorKey in errors) {
	                        if (!errors.hasOwnProperty(errorKey)) continue;
	                        $children = (0, _$2['default'])('[data-gentle-error-when="' + errorKey + '"', element);

	                        if (errors[errorKey]) {
	                            if (tag != 'form' || validateForm) $children.show();
	                        } else {
	                            $children.hide();
	                        }
	                    }
	                });
	            });
	        }
	    }]);

	    return GentleForm;
	})();

	exports['default'] = GentleForm;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var $ = (function () {
	    function $(selector, parent) {
	        _classCallCheck(this, $);

	        if (selector instanceof $) {
	            this.elements = selector.get();
	        } else if (typeof selector == 'string') {
	            if (parent instanceof $) parent = parent.get(0);
	            this.elements = [].slice.call((parent || document).querySelectorAll(selector));
	        } else if (selector instanceof Array) {
	            this.elements = selector;
	        } else {
	            this.elements = [selector];
	        }
	    }

	    _createClass($, [{
	        key: 'get',
	        value: function get(index) {
	            return index === undefined ? this.elements : this.elements[index];
	        }
	    }, {
	        key: 'each',
	        value: function each(callback) {
	            this.elements.forEach(callback);
	            return this;
	        }
	    }, {
	        key: 'on',
	        value: function on(eventName, callback) {
	            this.each(function (element) {
	                element.addEventListener(eventName, callback, ['focus', 'blur'].indexOf(eventName) > -1);
	            });

	            return this;
	        }
	    }, {
	        key: 'addClass',
	        value: function addClass(className) {
	            this.each(function (element) {
	                element.classList.add(className);
	            });
	            return this;
	        }
	    }, {
	        key: 'removeClass',
	        value: function removeClass(className) {
	            this.each(function (element) {
	                element.classList.remove(className);
	            });
	            return this;
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            this.removeClass('gentle-hide');
	            return this;
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this.addClass('gentle-hide');
	            return this;
	        }
	    }, {
	        key: 'getAttr',
	        value: function getAttr(attr) {
	            return this.get(0).getAttribute(attr);
	        }
	    }, {
	        key: 'setAttr',
	        value: function setAttr(attr, value) {
	            this.each(function (element) {
	                element.setAttribute(attr, value);
	            });

	            return this;
	        }
	    }, {
	        key: 'concat',
	        value: function concat(selector, parent) {
	            this.elements = this.elements.concat(new $(selector, parent).get());
	            return this;
	        }
	    }, {
	        key: 'setState',
	        value: function setState(stateName, stateValue) {
	            if (stateValue === undefined) throw 'No stateValue passed to $.setState()';

	            this.each(function (element) {
	                if (!element.gentleState) element.gentleState = {};
	                element.gentleState[stateName] = stateValue;
	            });

	            var className = 'gentle-state-' + stateName;
	            var $reflectors = new $('[data-gentle-state-for="' + this.getAttr('name') + '"]', this.get(0));

	            if (stateValue) {
	                this.addClass(className);
	                $reflectors.addClass(className);
	            } else {
	                this.removeClass(className);
	                $reflectors.removeClass(className);
	            }

	            return this;
	        }
	    }, {
	        key: 'getState',
	        value: function getState(stateName) {
	            var element = this.get(0);
	            return element.gentleState ? element.gentleState[stateName] : null;
	        }
	    }, {
	        key: 'getValue',
	        value: function getValue() {
	            return this.get(0).value;
	        }
	    }, {
	        key: 'isValid',
	        value: function isValid() {
	            return this.get(0).checkValidity();
	        }
	    }, {
	        key: 'getErrors',
	        value: function getErrors() {
	            var element = this.get(0);
	            var errors = {};

	            for (var error in element.validity) {
	                if (error == 'valid') errors.invalid = !element.validity.valid;else errors[error] = element.validity[error];
	            }

	            if (typeof errors.invalid != 'boolean') errors.invalid = !element.checkValidity();

	            return errors;
	        }
	    }]);

	    return $;
	})();

	exports['default'] = function (selector, parent) {
	    return new $(selector, parent);
	};

	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	exports['default'] = function ($element) {
	    return $element.get(0).tagName != 'button' && ['button', 'submit'].indexOf($element.getAttr('type')) < 0;
	};

	module.exports = exports['default'];

/***/ }
/******/ ])
});
;